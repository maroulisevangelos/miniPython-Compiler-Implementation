/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncCommands(AFuncCommands node)
    {
        defaultIn(node);
    }

    public void outAFuncCommands(AFuncCommands node)
    {
        defaultOut(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        inAFuncCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncCommands(node);
    }

    public void inAStatCommands(AStatCommands node)
    {
        defaultIn(node);
    }

    public void outAStatCommands(AStatCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        inAStatCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatCommands(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        {
            Object temp[] = node.getComIdAsVal().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComIdAsVal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getAsValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAsValue) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgument(node);
    }

    public void inAComIdAsVal(AComIdAsVal node)
    {
        defaultIn(node);
    }

    public void outAComIdAsVal(AComIdAsVal node)
    {
        defaultOut(node);
    }

    public void caseAComIdAsVal(AComIdAsVal node)
    {
        inAComIdAsVal(node);
        {
            Object temp[] = node.getAsValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAsValue) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAComIdAsVal(node);
    }

    public void inAAsValue(AAsValue node)
    {
        defaultIn(node);
    }

    public void outAAsValue(AAsValue node)
    {
        defaultOut(node);
    }

    public void caseAAsValue(AAsValue node)
    {
        inAAsValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAsValue(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getOrComparison() != null)
        {
            node.getOrComparison().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getOrComparison() != null)
        {
            node.getOrComparison().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getIId() != null)
        {
            node.getIId().apply(this);
        }
        if(node.getFId() != null)
        {
            node.getFId().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getComExp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAMeqStatement(AMeqStatement node)
    {
        defaultIn(node);
    }

    public void outAMeqStatement(AMeqStatement node)
    {
        defaultOut(node);
    }

    public void caseAMeqStatement(AMeqStatement node)
    {
        inAMeqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMeqStatement(node);
    }

    public void inADeqStatement(ADeqStatement node)
    {
        defaultIn(node);
    }

    public void outADeqStatement(ADeqStatement node)
    {
        defaultOut(node);
    }

    public void caseADeqStatement(ADeqStatement node)
    {
        inADeqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADeqStatement(node);
    }

    public void inAListStatement(AListStatement node)
    {
        defaultIn(node);
    }

    public void outAListStatement(AListStatement node)
    {
        defaultOut(node);
    }

    public void caseAListStatement(AListStatement node)
    {
        inAListStatement(node);
        if(node.getOutBr() != null)
        {
            node.getOutBr().apply(this);
        }
        if(node.getInBr() != null)
        {
            node.getInBr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        {
            Object temp[] = node.getComExp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssertStatement(node);
    }

    public void inAFuncCallStatement(AFuncCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatement(AFuncCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        inAFuncCallStatement(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallStatement(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAModExpression(AModExpression node)
    {
        defaultIn(node);
    }

    public void outAModExpression(AModExpression node)
    {
        defaultOut(node);
    }

    public void caseAModExpression(AModExpression node)
    {
        inAModExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAModExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADivExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADmultExpression(ADmultExpression node)
    {
        defaultIn(node);
    }

    public void outADmultExpression(ADmultExpression node)
    {
        defaultOut(node);
    }

    public void caseADmultExpression(ADmultExpression node)
    {
        inADmultExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADmultExpression(node);
    }

    public void inAIncreaseExpression(AIncreaseExpression node)
    {
        defaultIn(node);
    }

    public void outAIncreaseExpression(AIncreaseExpression node)
    {
        defaultOut(node);
    }

    public void caseAIncreaseExpression(AIncreaseExpression node)
    {
        inAIncreaseExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIncreaseExpression(node);
    }

    public void inADecreaseExpression(ADecreaseExpression node)
    {
        defaultIn(node);
    }

    public void outADecreaseExpression(ADecreaseExpression node)
    {
        defaultOut(node);
    }

    public void caseADecreaseExpression(ADecreaseExpression node)
    {
        inADecreaseExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADecreaseExpression(node);
    }

    public void inAListExpression(AListExpression node)
    {
        defaultIn(node);
    }

    public void outAListExpression(AListExpression node)
    {
        defaultOut(node);
    }

    public void caseAListExpression(AListExpression node)
    {
        inAListExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListExpression(node);
    }

    public void inABrExpression(ABrExpression node)
    {
        defaultIn(node);
    }

    public void outABrExpression(ABrExpression node)
    {
        defaultOut(node);
    }

    public void caseABrExpression(ABrExpression node)
    {
        inABrExpression(node);
        {
            Object temp[] = node.getComExp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outABrExpression(node);
    }

    public void inAFuncCallExpression(AFuncCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpression(AFuncCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        inAFuncCallExpression(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAIdExpression(AIdExpression node)
    {
        defaultIn(node);
    }

    public void outAIdExpression(AIdExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdExpression(AIdExpression node)
    {
        inAIdExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExpression(node);
    }

    public void inALenExpression(ALenExpression node)
    {
        defaultIn(node);
    }

    public void outALenExpression(ALenExpression node)
    {
        defaultOut(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        inALenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALenExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        {
            Object temp[] = node.getComVal().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComVal) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMaxExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        {
            Object temp[] = node.getComVal().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComVal) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMinExpression(node);
    }

    public void inAParExpression(AParExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpression(AParExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        inAParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpression(node);
    }

    public void inAComVal(AComVal node)
    {
        defaultIn(node);
    }

    public void outAComVal(AComVal node)
    {
        defaultOut(node);
    }

    public void caseAComVal(AComVal node)
    {
        inAComVal(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAComVal(node);
    }

    public void inAOrOrComparison(AOrOrComparison node)
    {
        defaultIn(node);
    }

    public void outAOrOrComparison(AOrOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrOrComparison(AOrOrComparison node)
    {
        inAOrOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAOrOrComparison(node);
    }

    public void inAAndOrComparison(AAndOrComparison node)
    {
        defaultIn(node);
    }

    public void outAAndOrComparison(AAndOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndOrComparison(AAndOrComparison node)
    {
        inAAndOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAAndOrComparison(node);
    }

    public void inANotOrComparison(ANotOrComparison node)
    {
        defaultIn(node);
    }

    public void outANotOrComparison(ANotOrComparison node)
    {
        defaultOut(node);
    }

    public void caseANotOrComparison(ANotOrComparison node)
    {
        inANotOrComparison(node);
        if(node.getOrComparison() != null)
        {
            node.getOrComparison().apply(this);
        }
        outANotOrComparison(node);
    }

    public void inATrueOrComparison(ATrueOrComparison node)
    {
        defaultIn(node);
    }

    public void outATrueOrComparison(ATrueOrComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueOrComparison(ATrueOrComparison node)
    {
        inATrueOrComparison(node);
        outATrueOrComparison(node);
    }

    public void inAFalseOrComparison(AFalseOrComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseOrComparison(AFalseOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseOrComparison(AFalseOrComparison node)
    {
        inAFalseOrComparison(node);
        outAFalseOrComparison(node);
    }

    public void inALessOrComparison(ALessOrComparison node)
    {
        defaultIn(node);
    }

    public void outALessOrComparison(ALessOrComparison node)
    {
        defaultOut(node);
    }

    public void caseALessOrComparison(ALessOrComparison node)
    {
        inALessOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outALessOrComparison(node);
    }

    public void inAGreatOrComparison(AGreatOrComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatOrComparison(AGreatOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatOrComparison(AGreatOrComparison node)
    {
        inAGreatOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAGreatOrComparison(node);
    }

    public void inAGreqOrComparison(AGreqOrComparison node)
    {
        defaultIn(node);
    }

    public void outAGreqOrComparison(AGreqOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreqOrComparison(AGreqOrComparison node)
    {
        inAGreqOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAGreqOrComparison(node);
    }

    public void inALeeqOrComparison(ALeeqOrComparison node)
    {
        defaultIn(node);
    }

    public void outALeeqOrComparison(ALeeqOrComparison node)
    {
        defaultOut(node);
    }

    public void caseALeeqOrComparison(ALeeqOrComparison node)
    {
        inALeeqOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outALeeqOrComparison(node);
    }

    public void inADiffOrComparison(ADiffOrComparison node)
    {
        defaultIn(node);
    }

    public void outADiffOrComparison(ADiffOrComparison node)
    {
        defaultOut(node);
    }

    public void caseADiffOrComparison(ADiffOrComparison node)
    {
        inADiffOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADiffOrComparison(node);
    }

    public void inAEqOrComparison(AEqOrComparison node)
    {
        defaultIn(node);
    }

    public void outAEqOrComparison(AEqOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqOrComparison(AEqOrComparison node)
    {
        inAEqOrComparison(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAEqOrComparison(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        {
            Object temp[] = node.getArglist().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArglist) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAArglist(AArglist node)
    {
        defaultIn(node);
    }

    public void outAArglist(AArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglist(AArglist node)
    {
        inAArglist(node);
        {
            Object temp[] = node.getComExp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArglist(node);
    }

    public void inAComExp(AComExp node)
    {
        defaultIn(node);
    }

    public void outAComExp(AComExp node)
    {
        defaultOut(node);
    }

    public void caseAComExp(AComExp node)
    {
        inAComExp(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAComExp(node);
    }

    public void inAMethodValue(AMethodValue node)
    {
        defaultIn(node);
    }

    public void outAMethodValue(AMethodValue node)
    {
        defaultOut(node);
    }

    public void caseAMethodValue(AMethodValue node)
    {
        inAMethodValue(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMethodValue(node);
    }

    public void inANumbValue(ANumbValue node)
    {
        defaultIn(node);
    }

    public void outANumbValue(ANumbValue node)
    {
        defaultOut(node);
    }

    public void caseANumbValue(ANumbValue node)
    {
        inANumbValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumbValue(node);
    }

    public void inAStrValue(AStrValue node)
    {
        defaultIn(node);
    }

    public void outAStrValue(AStrValue node)
    {
        defaultOut(node);
    }

    public void caseAStrValue(AStrValue node)
    {
        inAStrValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }
}
