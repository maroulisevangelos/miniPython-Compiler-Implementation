/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFuncCommands(AFuncCommands node);
    void caseAStatCommands(AStatCommands node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseAComIdAsVal(AComIdAsVal node);
    void caseAAsValue(AAsValue node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseAMeqStatement(AMeqStatement node);
    void caseADeqStatement(ADeqStatement node);
    void caseAListStatement(AListStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFuncCallStatement(AFuncCallStatement node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAModExpression(AModExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADmultExpression(ADmultExpression node);
    void caseAIncreaseExpression(AIncreaseExpression node);
    void caseADecreaseExpression(ADecreaseExpression node);
    void caseAListExpression(AListExpression node);
    void caseABrExpression(ABrExpression node);
    void caseAFuncCallExpression(AFuncCallExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseALenExpression(ALenExpression node);
    void caseAMaxExpression(AMaxExpression node);
    void caseAMinExpression(AMinExpression node);
    void caseAParExpression(AParExpression node);
    void caseAComVal(AComVal node);
    void caseAOrOrComparison(AOrOrComparison node);
    void caseAAndOrComparison(AAndOrComparison node);
    void caseANotOrComparison(ANotOrComparison node);
    void caseATrueOrComparison(ATrueOrComparison node);
    void caseAFalseOrComparison(AFalseOrComparison node);
    void caseALessOrComparison(ALessOrComparison node);
    void caseAGreatOrComparison(AGreatOrComparison node);
    void caseAGreqOrComparison(AGreqOrComparison node);
    void caseALeeqOrComparison(ALeeqOrComparison node);
    void caseADiffOrComparison(ADiffOrComparison node);
    void caseAEqOrComparison(AEqOrComparison node);
    void caseAFuncCall(AFuncCall node);
    void caseAArglist(AArglist node);
    void caseAComExp(AComExp node);
    void caseAMethodValue(AMethodValue node);
    void caseANumbValue(ANumbValue node);
    void caseAStrValue(AStrValue node);
    void caseANoneValue(ANoneValue node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTDplus(TDplus node);
    void caseTMinus(TMinus node);
    void caseTDminus(TDminus node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAs(TAs node);
    void caseTEq(TEq node);
    void caseTMeq(TMeq node);
    void caseTDeq(TDeq node);
    void caseTExclam(TExclam node);
    void caseTDiff(TDiff node);
    void caseTDictt(TDictt node);
    void caseTDef(TDef node);
    void caseTLogicPlus(TLogicPlus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTGqmark(TGqmark node);
    void caseTIf(TIf node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTAssert(TAssert node);
    void caseTLess(TLess node);
    void caseTLeeq(TLeeq node);
    void caseTGreat(TGreat node);
    void caseTGreq(TGreq node);
    void caseTLen(TLen node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTNone(TNone node);
    void caseTQuote(TQuote node);
    void caseTIn(TIn node);
    void caseTFullstop(TFullstop node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
